{"ast":null,"code":"var _jsxFileName = \"/home/martinch/Development/dashboard-descartes/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // import * as serviceWorker from './serviceWorker.js';  FUNKAR ,,men intellij ger error fast de funkar..störigt..\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}), document.getElementById('root')); ////////////////////\n\nvar http = require('http');\n\nvar server = http.createServer(function (req, res) {\n  res.writeHead(200, {\n    'Content-type': 'text/html'\n  });\n  res.end('<h1>Hello NodeJS</h1>');\n}).listen(8000, '130.237.59.170'); /////130.237.59.170\n\n/*\n\n\nconst http = require('http')\n\nhttp.createServer(handleRequest).listen(8000)\n\nfunction handleRequest (request, response) {\n\n    // log request method & URL\n    console.log(`${request.method} ${request.url}`)\n\n    // for GET (and other non-POST) requests show \"ok\" and stop here\n    if (request.method !== 'POST') return response.end('ok')\n\n    // for POST requests, read out the request body, log it, then show \"ok\" as response\n    let payload = ''\n    request.on('data', (data) => payload += data );\n    request.on('end', () => {\n        console.log(payload)\n        response.end('ok')\n    })\n}\n\n*/\n////////////////////\n\n/*\nvar http = require('http')\nvar createHandler = require('github-webhook-handler')\nvar handler = createHandler({ path: '/webhook', secret: 'myhashsecret' })\n\nhttp.createServer(function (req, res) {\n    handler(req, res, function (err) {\n        res.statusCode = 404\n        res.end('no such location')\n    })\n}).listen(8000)\n\nhandler.on('error', function (err) {\n    console.error('Error:', err.message)\n})\n\nhandler.on('push', function (event) {\n    console.log('Received a push event for %s to %s',\n        event.payload.repository.name,\n        event.payload.ref)\n})\n\nhandler.on('issues', function (event) {\n    console.log('Received an issue event for %s action=%s: #%d %s',\n        event.payload.repository.name,\n        event.payload.action,\n        event.payload.issue.number,\n        event.payload.issue.title)\n})\n\n*/\n////////////////////////\n\n/*\nReactDOM.render(\n    <h1>Hello, world...!</h1>,\n    document.getElementById('root')\n);\n*/\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//tog BORT.. serviceWorker.unregister();","map":{"version":3,"sources":["/home/martinch/Development/dashboard-descartes/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById","http","require","server","createServer","req","res","writeHead","end","listen"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;AAGAD,QAAQ,CAACE,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAGA;;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAIC,MAAM,GAAGF,IAAI,CAACG,YAAL,CAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzCA,EAAAA,GAAG,CAACC,SAAJ,CAAc,GAAd,EAAmB;AAAC,oBAAe;AAAhB,GAAnB;AACAD,EAAAA,GAAG,CAACE,GAAJ,CAAQ,uBAAR;AACH,CAHY,EAGVC,MAHU,CAGH,IAHG,EAGG,gBAHH,CAAb,C,CAMA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;AAEA;;;;;;AAQA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker.js';  FUNKAR ,,men intellij ger error fast de funkar..störigt..\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n////////////////////\n\nconst http = require('http');\nvar server = http.createServer((req, res) => {\n    res.writeHead(200, {'Content-type':'text/html'});\n    res.end('<h1>Hello NodeJS</h1>');\n}).listen(8000, '130.237.59.170');\n\n\n/////130.237.59.170\n\n/*\n\n\nconst http = require('http')\n\nhttp.createServer(handleRequest).listen(8000)\n\nfunction handleRequest (request, response) {\n\n    // log request method & URL\n    console.log(`${request.method} ${request.url}`)\n\n    // for GET (and other non-POST) requests show \"ok\" and stop here\n    if (request.method !== 'POST') return response.end('ok')\n\n    // for POST requests, read out the request body, log it, then show \"ok\" as response\n    let payload = ''\n    request.on('data', (data) => payload += data );\n    request.on('end', () => {\n        console.log(payload)\n        response.end('ok')\n    })\n}\n\n*/\n////////////////////\n\n/*\nvar http = require('http')\nvar createHandler = require('github-webhook-handler')\nvar handler = createHandler({ path: '/webhook', secret: 'myhashsecret' })\n\nhttp.createServer(function (req, res) {\n    handler(req, res, function (err) {\n        res.statusCode = 404\n        res.end('no such location')\n    })\n}).listen(8000)\n\nhandler.on('error', function (err) {\n    console.error('Error:', err.message)\n})\n\nhandler.on('push', function (event) {\n    console.log('Received a push event for %s to %s',\n        event.payload.repository.name,\n        event.payload.ref)\n})\n\nhandler.on('issues', function (event) {\n    console.log('Received an issue event for %s action=%s: #%d %s',\n        event.payload.repository.name,\n        event.payload.action,\n        event.payload.issue.number,\n        event.payload.issue.title)\n})\n\n*/\n////////////////////////\n\n/*\nReactDOM.render(\n    <h1>Hello, world...!</h1>,\n    document.getElementById('root')\n);\n*/\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n//tog BORT.. serviceWorker.unregister();\n\n"]},"metadata":{},"sourceType":"module"}